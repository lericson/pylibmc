name: CD
on:
  push:
    tags:
    - '*'

jobs:

  build_wheels:
    name: Build wheel for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.12

      - name: Set up QEMU
        if: ${{ matrix.os == 'ubuntu-latest' }}
        uses: docker/setup-qemu-action@v3

      - name: Install cibuildwheel
        run: |
          python -m pip install cibuildwheel

      - name: Install prebuilt Universal libraries for macOS
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          curl --output libs.tgz https://bsg.lericson.se/pylibmc_macos_libs.tar.gz
          tar -C /usr/local -xzmvf libs.tgz
          rm libs.tgz

      - name: Build wheels
        env:
          CIBW_SKIP: "*-musllinux* pp*"
          CIBW_ARCHS_MACOS: "x86_64 arm64"
          CIBW_ARCHS_LINUX: "x86_64 aarch64"
          CIBW_BEFORE_BUILD_LINUX: "yum install -y libmemcached-devel"
          # We set DYLD_LIBRARY_PATH because of what appears to be a bug in
          # `delocate`, the program that bundles up the shared library
          # dependencies into the wheel file. The linker makes a link like
          # @rpath/libmemcached.11.dylib or similar, and delocate is unable to
          # resolve this @rpath macro into /usr/local/lib for some reason. It
          # would appear that delocate expects an LC_RPATH command to be listed
          # by `otool -l _pylibmc....so`, which it isn't. This does not seem to
          # be a problem for the DYLD system itself though, so again, likely a
          # bug in delocate. Fix by encouraging with DYLD_LIBRARY_PATH.
          CIBW_REPAIR_WHEEL_COMMAND_MACOS: "env DYLD_LIBRARY_PATH=/usr/local/lib delocate-wheel --require-archs {delocate_archs} -w {dest_dir} {wheel}"
        run: |
          cibuildwheel --output-dir ./wheelhouse

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: wheels
          path: ./wheelhouse/*.whl

  build_sdist:
    name: Build source distribution
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.7'

      - name: Build sdist
        run: |
          python setup.py sdist

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dist
          path: dist/*.tar.gz

  #upload_pypi:
  #  needs: [build_wheels, build_sdist]
  #  runs-on: ubuntu-latest
  #  steps:
  #    - uses: actions/download-artifact@v3
  #      with:
  #        name: artifact
  #        path: dist

  #    - uses: actions/download-artifact@v3
  #      with:
  #        name: wheels
  #        path: dist

  #    - name: Publish to PyPI
  #      uses: pypa/gh-action-pypi-publish@master
  #      with:
  #        user: ${{ secrets.PYPI_USERNAME }}
  #        password: ${{ secrets.PYPI_PASSWORD }}

  release:
    name: Create GitHub release
    needs:
      - build_wheels
      - build_sdist
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
      - name: Make zip of artifacts
        run: |
          zip -0 artifacts.zip wheels/*.whl dist/*.tar.gz
      - name: Release on GitHub
        uses: softprops/action-gh-release@v2
        with:
          files: |
            wheels/*.whl
            dist/*.tar.gz
            artifacts.zip
